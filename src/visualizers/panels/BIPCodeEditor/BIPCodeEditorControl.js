/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 12 2017 11:41:59 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Constants',
    'q'
], function (CONSTANTS,
             Q) {

    'use strict';

    var BIPCodeEditorControl;

    BIPCodeEditorControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        this._widget = options.widget;
        this._currentNodeId = null;
        this._currentGuards = {};
        this._currentTransactions = {};
        this._gatheringSegments = false;
        this._missedEvents = false;

        this._territory = null;
        this._segmentInfo = {};
        this._UID = null;

        this._initialize();

        this._logger.debug('ctor finished');
    };

    BIPCodeEditorControl.prototype._initialize = function () {
        var self = this;

        this._UID = this._client.addUI(self, function (events) {
            self._eventCallback(events);
        });

        this._initWidgetEventHandlers();
    };

    BIPCodeEditorControl.prototype._initWidgetEventHandlers = function () {
        var self = this;
        this._widget.onSave = function (segmentedDocumentObject) {
            console.log(segmentedDocumentObject);
            // self._SaveDocument(segmentedDocumentObject);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    BIPCodeEditorControl.prototype.selectedObjectChanged = function (nodeId) {

        if (typeof nodeId === 'string' &&
            this._currentNodeId !== nodeId &&
            this._client.getNode(this._client.getNode(nodeId).getMetaTypeId())
                .getAttribute('name') === 'ComponentType') {
            //we have a viable component type so let us change things
            this._currentNodeId = nodeId;
            this._selfPatterns = {};
            this._selfPatterns[nodeId] = {children: 1};
            this._client.updateTerritory(this._UID, this._selfPatterns);
        } else {
            this._logger.info('received unwanted object change event');
        }
    };

    BIPCodeEditorControl.prototype._buildSegmentInfo = function (nodeId) {
        var deferred = Q.defer(),
            segmentInfo = {},
            context;

        Q.ninvoke(this._client, 'getCoreInstance', {})
            .then(function (context_) {
                context = context_;
                return context.core.loadByPath(context.rootNode, nodeId);
            })
            .then(function (componentType) {

                segmentInfo['*forwards*' + nodeId] = context.core.getAttribute(componentType, 'forwards');
                segmentInfo['*definitions*' + nodeId] = context.core.getAttribute(componentType, 'definitions');
                segmentInfo['*constructors*' + nodeId] = context.core.getAttribute(componentType, 'constructors');
                return context.core.loadChildren(componentType);
            })
            .then(function (children) {
                var i;

                for (i = 0; i < children.length; i += 1) {
                    if (context.core.isInstanceOf(children[i], 'TransitionBase')) {
                        segmentInfo['*transition*' + nodeId] =
                            context.core.getAttribute(children[i], 'transitionMethod');
                    } else if (context.core.isInstanceOf(children[i], 'Guard')) {
                        segmentInfo['*guard*' + nodeId] =
                            context.core.getAttribute(children[i], 'guardMethod');
                    }
                }
                deferred.resolve(segmentInfo);
            })
            .catch(deferred.reject);

        return deferred.promise;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    BIPCodeEditorControl.prototype._eventCallback = function (events) {
        var self = this,
            needRefresh = false,
            segmentedDocumentObject,
            nodeType,
            i;

        for (i = 0; i < events.length; i += 1) {
            switch (events[i].etype) {
                case CONSTANTS.TERRITORY_EVENT_LOAD:
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    if (events[i].eid === this._currentNodeId) {
                        needRefresh = true;
                    } else {
                        nodeType = this._client.getNode(this._client.getNode(events[i].eid).getMetaTypeId())
                            .getAttribute('name');

                        if (nodeType.indexOf('Transition') > 0) {
                            this._currentTransactions[events[i].eid] = true;
                            needRefresh = true;
                        } else if (nodeType === 'Guard') {
                            this._currentGuards[events[i].eid] = true;
                            needRefresh = true;
                        }
                    }
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    if (events[i].eid === this._currentNodeId) {
                        needRefresh = true;
                    } else {
                        if (this._currentGuards[events[i].eid]) {
                            needRefresh = true;
                            delete this._currentGuards[events[i].eid];
                        } else if (this._currentTransactions[events[i].eid]) {
                            needRefresh = true;
                            delete this._currentTransactions[events[i].eid];
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        if (needRefresh) {
            if (this._gatheringSegments) {
                this._missedEvents = true;
            } else {
                this._buildSegmentInfo(this._currentNodeId)
                    .then(function (segments) {
                        self._gatheringSegments = false;
                        if (self._missedEvents) {
                            self._missedEvents = false;
                            self._eventCallback([{eid: self._currentNodeId, etype: CONSTANTS.TERRITORY_EVENT_UPDATE}]);
                        } else {
                            segmentedDocumentObject = {
                                composition: ['*forwards*' + self._currentNodeId,
                                    '*definitions*' + self._currentNodeId,
                                    '*constructors*' + self._currentNodeId],
                                segments: {}
                            };

                            for (i = 0; i < segmentedDocumentObject.composition.length; i += 1) {
                                segmentedDocumentObject.segments[segmentedDocumentObject.composition[i]] = {
                                    value: segments[segmentedDocumentObject.composition[i]],
                                    options: {readonly: false}
                                }
                            }

                            self._widget.setSegmentedDocument(segmentedDocumentObject);
                        }
                    })
                    .catch(function (err) {
                        self._gatheringSegments = false;
                        self._logger.error('error during segment info build:', err);
                        if (self._missedEvents) {
                            self._missedEvents = false;
                            self._eventCallback([{eid: self._currentNodeId, etype: CONSTANTS.TERRITORY_EVENT_UPDATE}]);
                        }
                    });
            }
        }
    };

    BIPCodeEditorControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    BIPCodeEditorControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    BIPCodeEditorControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    BIPCodeEditorControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    BIPCodeEditorControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    BIPCodeEditorControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    BIPCodeEditorControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    BIPCodeEditorControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    BIPCodeEditorControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    BIPCodeEditorControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    BIPCodeEditorControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    BIPCodeEditorControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    BIPCodeEditorControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return BIPCodeEditorControl;
});
