/*globals define, WebGMEGlobal, $*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 12 2017 11:41:59 GMT-0500 (Central Daylight Time).
 */

define(['./bower_components/codemirror/lib/codemirror',
    './bower_components/codemirror/mode/clike/clike',
    'text!./BIPCodeEditor.html',
    'css!./styles/BIPCodeEditorWidget.css',
    'css!./bower-components/codemirror/lib/codemirror.css',
    'css!./bower_components/codemirror/theme/monokai.css'
], function (CodeMirror, CodeMirrorModeClike, CodeEditorHtml) {
    'use strict';

    var BIPCodeEditorWidget,
        WIDGET_CLASS = 'b-i-p-code-editor';

    BIPCodeEditorWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._container = null;
        this._codearea = null;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    BIPCodeEditorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        this._el.append(CodeEditorHtml);

        this._container = this._el.find('#BIP_CODE_EDITOR_DIV').first();
        this._codearea = this._el.find('#codearea').first();
        this._codearea.focus();
        this.editor = CodeMirror.fromTextArea(
            this._codearea.get(0),
            {
                readOnly: false,
                lineNumbers: true,
                matchBrackets: true,
                lint: false,
                path: './bower_components/codemirror/lib/',
                theme: 'monokai',
                mode: 'text/x-java',
                autofocus: true,
                dragDrop: false,
                gutters: ["CodeMirror-linenumbers"]
            }
        );

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    BIPCodeEditorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
        $(this._el).find('.CodeMirror').css({
            height: height
        });
        this.editor.refresh();
    };

    // Adding/Removing/Updating items
    BIPCodeEditorWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    BIPCodeEditorWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    BIPCodeEditorWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    BIPCodeEditorWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    BIPCodeEditorWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    BIPCodeEditorWidget.prototype.destroy = function () {
    };

    BIPCodeEditorWidget.prototype.onActivate = function () {
        this._logger.debug('BIPCodeEditorWidget has been activated');
    };

    BIPCodeEditorWidget.prototype.onDeactivate = function () {
        this._logger.debug('BIPCodeEditorWidget has been deactivated');
    };

    return BIPCodeEditorWidget;
});
