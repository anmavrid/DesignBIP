/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Mar 08 2017 15:24:49 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs',
    'text!./Templates/language.ejs',
    'text!./Templates/model.ejs'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    languageTemplate,
    modelTemplate) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of BIP_CodeGenerate.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin BIP_CodeGenerate.
     * @constructor
     */
    var BIP_CodeGenerate = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    BIP_CodeGenerate.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    BIP_CodeGenerate.prototype = Object.create(PluginBase.prototype);
    BIP_CodeGenerate.prototype.constructor = BIP_CodeGenerate;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    BIP_CodeGenerate.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            artifact,
            languageText,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');

        self.extractDataModel(self.activeNode)
            .then(function (nodes) {

                //self.logger.info(Object.keys(nodes));
                var dataModel = self.makeModelObject(nodes);
                var dataModelStr = JSON.stringify(dataModel, null, 4);
                self.dataModel = dataModel;
                self.logger.info('************DataModel***********\n',dataModelStr);

                var langModel = self.makeLanguageObject(nodes);
                var langModelStr = JSON.stringify(langModel, null, 4);
                self.langModel = langModel;
                self.logger.info('************LangModel***********\n',langModelStr);


                artifact = self.blobClient.createArtifact('project-data');


                //var JSCodeLang = ejs.render(languageTemplate, self);

                //var currentConfig = self.getCurrentConfig();
                //self.currentConfig = currentConfig;

                var JSCodeModel = ejs.render(modelTemplate, self);

                //var JSCode = JSCodeLang+JSCodeModel;
                self.logger.info('************Code is***********\n',JSCodeModel);

                return artifact.addFiles({'dataModel.json':dataModelStr,'langModel.json':langModelStr,'Route.java':JSCodeModel});
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            }) ;
    };

    BIP_CodeGenerate.prototype.extractDataModel = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }
                return nodes;
            });
    };

    BIP_CodeGenerate.prototype.makeLanguageObject = function (nodes) {
        var self = this,
            path,
            node,
            languageModel={};

        for (path in nodes) {
            node = nodes[path];
            if(node!=self.rootNode) {
                if (self.core.isMetaNode(node))
                    languageModel[self.core.getAttribute(self.getMetaType(node), 'name')] = self.info_of_language(node, nodes);
            }
        }
        return languageModel;
    };

    BIP_CodeGenerate.prototype.info_of_language = function (node,nodes) {
        var self= this,
            childrenPaths,
            i,
            lang = {
                attributes:[],
                canHavechildren:'',
                pointers:[],
                sets:[]
            };

        lang.attributes = self.core.getValidAttributeNames(node);

        if(self.core.getChildrenMeta(node)!== null)
            lang.canHavechildren = true;
        else
            lang.canHavechildren = false;

        lang.pointers = self.core.getValidPointerNames(node);

        lang.sets = self.core.getValidSetNames(node);

        return lang;
    };


    BIP_CodeGenerate.prototype.makeModelObject = function (nodes) {
        var self = this,
            path,
            node,
            dataModel={};

        for (path in nodes) {
            node = nodes[path];
            if(self.core.getAttribute(node, 'name')!="FCO")
                dataModel[self.core.getPath(node)] = self.info_of_model(node,nodes);
        }
        return dataModel;
    };


    BIP_CodeGenerate.prototype.info_of_model = function (node,nodes) {
        var self= this,
            childrenPaths,
            metaNode,
            i,
            values = {
                name:'',
                children: [],
                _type: '',
                _isMeta: ''
            };

        values.name = self.core.getAttribute(node, 'name');
        //self.logger.info("Name is",values.name);
        childrenPaths = self.core.getChildrenPaths(node);
        if(childrenPaths.length>0)
            values.children= childrenPaths;

        if(node!=self.rootNode) {
            metaNode = self.getMetaType(node);
            values._type = self.core.getAttribute(metaNode, 'name');

            if (self.getMetaType(node) === node) {
                values._isMeta = true;
            }
            else {
                values._isMeta = false;
            }

            var keys = self.core.getValidAttributeNames(node);
            for (i = 0; i < keys.length; i += 1) {

                values[keys[i]] = self.core.getAttribute(node,keys[i]);
            }

            keys = self.core.getValidPointerNames(node);
            for (i = 0; i < keys.length; i += 1) {

                values[keys[i]] = self.core.getPointerPath(node, keys[i]);
            }

            keys = self.core.getValidSetNames(node);
            for (i = 0; i < keys.length; i += 1) {
                values[keys[i]] = self.core.getMemberPaths(node, keys[i]);
            }
        }
        return values;
    };
    return BIP_CodeGenerate;
});