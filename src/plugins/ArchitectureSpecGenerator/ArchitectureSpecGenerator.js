/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Sun Feb 19 2017 20:48:34 GMT-0600 (CST).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/xmljsonconverter'
], function (
        PluginConfig,
        pluginMetadata,
        PluginBase,
        Converter) {
    'use strict';
    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ArchitectureSpecGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ArchitectureSpecGenerator.
     * @constructor
     */
    var ArchitectureSpecGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ArchitectureSpecGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ArchitectureSpecGenerator.prototype = Object.create(PluginBase.prototype);
    ArchitectureSpecGenerator.prototype.constructor = ArchitectureSpecGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ArchitectureSpecGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject,
            artifact;

        nodeObject = self.activeNode;

        self.loadNodeMap(nodeObject)
                .then(function (nodes) {
                    self.logger.debug(Object.keys(nodes));
                    //var model = self.generateArchitectureModel(nodes);
                    var model = self.generateMacros(self.generateArchitectureModel(nodes));
                    //self.logger.info(JSON.stringify(model, null, 4));

                    var accept = [];
                    var require = [];

                    for (var port of model.ports) {
                        var effect = {'@id': port.name, '@specType': port.componentType};
                        var acceptPorts = [];
                        for (var acc of port.accept) {
                            if (acc !== '') {
                                acceptPorts.push({'@id': acc[0], '@specType': acc[1]});
                            }
                        }
                        var acceptCauses = {port: acceptPorts};

                        var option = [];
                        if (port.require !== '') {
                            for (var requiredPorts of port.require) {
                                var causes = [];
                                for (var listOfPorts of requiredPorts) {
                                    var ports = [];
                                    for (var requiredPort of listOfPorts) {
                                        if (requiredPort !== '') {
                                            ports.push({'@id': requiredPort[0], '@specType': requiredPort[1]});
                                        }
                                    }
                                    causes.push({port: ports});
                                }
                                option.push({causes: causes});
                            }
                        }
                        accept.push({effect: effect, causes: acceptCauses});
                        require.push({effect: effect, causes: {option: option}});
                    }
                    var xml = {glue: {accepts: {accept: accept}, requires: {require: require}}};
                    var filesToAdd = {};
                    filesToAdd['Glue.xml'] = (new Converter.JsonToXml()).convertToString(xml);
                    artifact = self.blobClient.createArtifact('GlueSpecification');
                    return artifact.addFiles(filesToAdd);
                })
                .then(function (fileHash) {
                    self.result.addArtifact(fileHash);
                    return artifact.save();
                })
                .then(function () {
                    //.then(function (artifactHash) {
                    //self.result.addArtifact(artifactHash);
                    self.result.setSuccess(true);
                    callback(null, self.result);
                })
                .catch(function (err) {
                    self.logger.error(err.stack);
                    // Result success is false at invocation.
                    callback(err, self.result);
                }) ;
    };

    ArchitectureSpecGenerator.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
                .then(function (nodeArr) {
                    var nodes = {},
                            i;
                    for (i = 0; i < nodeArr.length; i += 1) {
                        nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                    }
                    return nodes;
                });
    };

    /* This is the algorithm presented in the paper */
    ArchitectureSpecGenerator.prototype.generateMacros = function (architectureModel) {
        //var self = this;

        for (var port of architectureModel.ports) {
            var require = new Set();
            var accept = new Set();

            for (var end of port.connectorEnds) {
                if (!end.hasOwnProperty('connector')) {
                    require.add('');
                    accept.add('');
                    break;
                }
            }
            for (var connector of port.connectors) {
                var option = [];
                var connectorEnd;
                for (var e of connector.ends) {
                    if (e.port === port) {
                        connectorEnd = e;
                    }
                }
                if (connectorEnd.multiplicity !== '1') {
                    //self.logger.info("multiplicity greater than 1 " + connectorEnd.port.name);
                    for (var otherConnectorEnd of connector.ends) {
                        //self.logger.info("adding port: "+ otherConnectorEnd.port.name+ " for "+port.name);
                        accept.add(otherConnectorEnd.port);
                    }
                } else {
                    for (var otherConEnd of connector.ends) {
                        //self.logger.info("multiplicity equal to 1 " + connectorEnd.port.name);
                        if (otherConEnd.port.name !== port.name) {
                            //self.logger.info("adding port: "+ otherConEnd.port.name+ " for "+port.name);
                            accept.add(otherConEnd.port);
                        }
                    }
                }
                if (connectorEnd.type === 'Trigger') {
                    option.push('');
                } else {
                    var triggerExists = false;
                    for (var other of connector.ends) {
                        if (other.type === 'Trigger') {
                            triggerExists = true;
                        }
                    }
                    for (var otherEnd of connector.ends) {
                        if (triggerExists === false) {
                            if (otherEnd.port.name !== port.name || parseInt(otherEnd.multiplicity) > '1' ) {
                                var reqCause = [];
                                for (var i = 0; i < parseInt(otherEnd.multiplicity); i++) {
                                    reqCause.push(otherEnd.port);
                                }
                                option.push(reqCause);
                            }
                        } else {
                            if (otherEnd.type === 'Trigger' && (otherEnd.port.name !== port.name || otherEnd.multiplicity !== 1 )) {
                                var reqCauseTrigger = [];
                                for (var i = 0; i < parseInt(otherEnd.multiplicity); i++) {
                                    reqCauseTrigger.push(otherEnd.port);
                                }
                                option.push(reqCauseTrigger);
                            }
                        }
                    }
                }
                require.add(option);
            }
            //set to list
            port.require = [...require];
            port.accept = [...accept];
        }

        for (var modelPort of architectureModel.ports) {
            var simpleAccept = [];
            var simpleRequire = [];
            for (var acceptedPort of modelPort.accept) {
                if (acceptedPort === '') {
                    simpleAccept.push('');
                } else {
                    simpleAccept.push([acceptedPort.name, acceptedPort.componentType]);
                }
            }
            for (var requireList of modelPort.require) {
                if (requireList === '') {
                    simpleRequire = '';
                } else {
                    var simpleRequireList = [];
                    for (var reqOption of requireList) {
                        var simpleList = [];
                        for (var requiredPort of reqOption) {
                            if (requiredPort === '') {
                                simpleList.push('');
                            } else {
                                simpleList.push([requiredPort.name, requiredPort.componentType]);
                            }
                        }
                        simpleRequireList.push(simpleList);
                    }
                    simpleRequire.push(simpleRequireList);
                }
            }
            modelPort.accept = simpleAccept;
            modelPort.require = simpleRequire;
        }
        return architectureModel;
    };

    ArchitectureSpecGenerator.prototype.generateArchitectureModel = function (nodes) {
        var self = this,
                subConnectors = [],
                architectureModel = {
                    ports: [],
                    connectors: [],
                    connectorEnds: []
                };

        for (var path in nodes) {
            var node = nodes[path];
            if (self.isMetaTypeOf(node, self.META.ComponentType)) {
                for (var child of self.core.getChildrenPaths(node)) {
                    if (self.isMetaTypeOf(nodes[child], self.META.EnforceableTransition)) {
                        nodes[child].componentType = path;
                    }
                }
            } else if (self.isMetaTypeOf(node, self.META.EnforceableTransition)) {
                var port = node;
                architectureModel.ports.push(port);
                port.name = self.core.getAttribute(node, 'name');
            } else if (self.isMetaTypeOf(node, self.META.Connector)) {
                /* If the connector is binary */
                if (self.getMetaType(nodes[self.core.getPointerPath(node, 'dst')]) !== self.META.Connector) {
                    var connector = node;
                    architectureModel.connectors.push(connector);
                    var srcConnectorEnd = nodes[self.core.getPointerPath(node, 'src')];
                    var dstConnectorEnd = nodes[self.core.getPointerPath(node, 'dst')];
                    srcConnectorEnd.connector = connector;
                    dstConnectorEnd.connector = connector;
                    connector.ends = [srcConnectorEnd, dstConnectorEnd];
                /* If it is part of an n-ary connector */
                } else {
                    subConnectors.push(node);
                }
            } else if (self.isMetaTypeOf(node, self.META.Connection) && self.getMetaType(node) !== node) {
                var gmeEnd = nodes[self.core.getPointerPath(node, 'src')];
                if (self.getMetaType(gmeEnd) !== self.META.Connector) {
                    var connectorEnd = gmeEnd;
                    architectureModel.connectorEnds.push(connectorEnd);

                    var auxPort = nodes[self.core.getPointerPath(node, 'dst')];
                    connectorEnd.port = auxPort;
                    if (!auxPort.hasOwnProperty('connectorEnds')) {
                        auxPort.connectorEnds = [];
                    }
                    auxPort.connectorEnds.push(connectorEnd);
                    connectorEnd.type = self.core.getAttribute(gmeEnd, 'name');
                    connectorEnd.degree = self.core.getAttribute(gmeEnd, 'degree');
                    connectorEnd.multiplicity = self.core.getAttribute(gmeEnd, 'multiplicity');
                    //self.logger.info('end of port ' + auxPort.name + " has multiplicity "+ connectorEnd.multiplicity);
                }
                //TODO: add also export ports
            }
        }

        for (var subpart of subConnectors) {
            var auxNode = nodes[self.core.getPointerPath(subpart, 'dst')];
            var srcAuxNode = nodes[self.core.getPointerPath(auxNode, 'src')];
            var srcEnd = nodes[self.core.getPointerPath(subpart, 'src')];
            if (architectureModel.connectors.includes(auxNode)) {
                auxNode.ends.push(srcEnd);
                srcEnd.connector = auxNode;
            } else if (architectureModel.connectorEnds.includes(srcAuxNode)) {
                for (var existingConnector in architectureModel.connectors) {
                    if (existingConnector.ends.includes(srcAuxNode)) {
                        existingConnector.ends.push(srcEnd);
                        srcEnd.connector = existingConnector;
                    }

                }
            }
        }

        for (var modelPort of architectureModel.ports) {
            modelPort.connectors = new Set();
            for (var conEnd of modelPort.connectorEnds) {
                if (conEnd.hasOwnProperty('connector')) {
                    modelPort.connectors.add(conEnd.connector);
                }
            }

        }
        return architectureModel;
    };

    return ArchitectureSpecGenerator;
});
