/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Sun Feb 19 2017 20:48:34 GMT-0600 (CST).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/xmljsonconverter'
], function (
        PluginConfig,
        pluginMetadata,
        PluginBase,
        Converter) {
    'use strict';
    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ArchitectureSpecGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ArchitectureSpecGenerator.
     * @constructor
     */
    var ArchitectureSpecGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ArchitectureSpecGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ArchitectureSpecGenerator.prototype = Object.create(PluginBase.prototype);
    ArchitectureSpecGenerator.prototype.constructor = ArchitectureSpecGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ArchitectureSpecGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;

        nodeObject = self.activeNode;

        self.loadNodeMap(nodeObject)
                .then(function (nodes) {
                    self.logger.debug(Object.keys(nodes));
                    var model = self.generateMacros(self.generateArchitectureModel(nodes));
                    self.logger.info(JSON.stringify(model, null, 4));
                    
                    var accept = [];
                    var require = [];
                    
                    for (var port of model.ports) {
                        var effect = {"@id": port.name, "@specType": port.componentType}; 
                        var acceptPorts = [];
                        for (var acc of port.accept)
                            if (acc !== "-") 
                                acceptPorts.push({"@id": acc[0], "@specType": acc[1]}); 
                        var acceptCauses = {"port": acceptPorts};
                        
                        var option = [];
                        if (port.require !== "-"){
                            for (var requiredPorts of port.require) {
                                var causes = [];
                                for (var listOfPorts of requiredPorts) {
                                    var ports = [];
                                    for (var requiredPort of listOfPorts) 
                                        if (requiredPort !== "-") {
                                            ports.push({"@id": requiredPort[0], "@specType": requiredPort[1]});
                                            self.logger.info("Required port: " + requiredPort[0] + " " + requiredPort[1]);
                                        }
                                    causes.push({"port" : ports});
                                }                            
                                option.push({"causes" : causes});
                            }
                        }

                        accept.push({"effect": effect, "causes": acceptCauses});
                        require.push({"effect": effect, "causes": {"option": option}});
                    }
                    
                    self.logger.info(require);
                    
                    var xml = {"glue" : {"accepts" : {"accept": accept}, "requires" : {"require": require}}};
                    //filesToAdd['Glue.xml'] = jsonToXml.convertToString(xml);
                    self.logger.info((new Converter.JsonToXml()).convertToString(xml));
                })
                .then(function(){
                    self.result.setSuccess(true);
                    callback(null, self.result);
                }) 
                .catch(function (err) {
                    self.logger.error(err.stack);
                    // Result success is false at invocation.
                    callback(err, self.result);
                });
    };

    ArchitectureSpecGenerator.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
                .then(function (nodeArr) {
                    var nodes = {},
                            i;
                    for (i = 0; i < nodeArr.length; i += 1) {
                        nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                    }
                    return nodes;
                });
    };
    
    ArchitectureSpecGenerator.prototype.generateMacros = function (architectureModel){
        var self = this; 
        
        for (var port of architectureModel.ports) {
            var require = new Set;
            var accept = new Set;
            
            for (var connectorEnd of port.connectorEnds)
                if (!connectorEnd.hasOwnProperty('connector')) {
                    require.add("-");
                    accept.add("-");
                    break;
                }
            for (var connector of port.connectors) {
                var option= [];
                var connectorEnd;
                for (var end of connector.ends)
                    if (end.port === port)
                        connectorEnd = end; 
                if (connectorEnd.multiplicity !== '1')
                    for (var otherConnectorEnd of connector.ends)
                        accept.add(otherConnectorEnd.port);
                else 
                   for (var otherConnectorEnd of connector.ends)
                        if (otherConnectorEnd.port.name !== port.name)
                            accept.add(otherConnectorEnd.port);
                if (connectorEnd.type === 'Trigger'){
                        option.push("-");
                    }
                else {
                    var triggerExists = false;
                    for (var otherConnectorEnd of connector.ends) {
                        if (otherConnectorEnd.type === 'Trigger')
                            triggerExists = true;
                    }
                    for (var otherConnectorEnd of connector.ends) {
                        if (triggerExists === false){
                            if (otherConnectorEnd.port.name !== port.name || parseInt(otherConnectorEnd.multiplicity) >1 ) {
                                var reqCause = [];
                                for (var i = 0; i < parseInt(otherConnectorEnd.multiplicity); i++)
                                    reqCause.push(otherConnectorEnd.port);
                                option.push(reqCause);
                                //require.add(reqCause);
                            }
                        }
                        else{
                            if (otherConnectorEnd.type === 'Trigger' && (otherConnectorEnd.port.name !== port.name || parseInt(otherConnectorEnd.multiplicity) >1 )){
                                var reqCause = [];
                                for (var i = 0; i < parseInt(otherConnectorEnd.multiplicity); i++)
                                    reqCause.push(otherConnectorEnd.port);
                                option.push(reqCause);
                            }
                        }
                    }
                }
                require.add(option);
            }
            //set to list
            port.require = [...require];
            port.accept = [...accept];
        }
        
        //remove circular references
        for (var end of architectureModel.connectorEnds){
                delete end.connector;
                delete end.port;
        }
        for (var port of architectureModel.ports) {
            var simpleAccept = [];
            var simpleRequire = [];
            for (var acceptedPort of port.accept) {
                if (acceptedPort === "-")
                    simpleAccept.push("-");
                else simpleAccept.push([acceptedPort.name, acceptedPort.componentType]);                            
            }                
            for (var requireList of port.require) {
                if (requireList === "-")
                    simpleRequire = "-";
                else {
                    var simpleRequireList = [];
                    for (var option of requireList) {
                        var simpleList = [];
                        for (var requiredPort of option) {
                            if (requiredPort === "-") 
                                simpleList.push("-");
                            else simpleList.push([requiredPort.name, requiredPort.componentType]);
                        }
                        simpleRequireList.push(simpleList);
                    }
                    simpleRequire.push(simpleRequireList);
                }
            }
            port.accept = simpleAccept;
            port.require = simpleRequire;
        }
        return architectureModel;
    };
    
    ArchitectureSpecGenerator.prototype.generateArchitectureModel = function (nodes) {
        var self = this,
                portObjects = {},
                connectorObjects = {},
                endObjects = {},
                architectureModel = {
                    ports: [],
                    connectors: [],
                    connectorEnds: []
                };
                
        //create new clean objects        
        function portToObject(port) {
            var path = self.core.getPath(port);
            if (!portObjects.hasOwnProperty(path)) {
                portObjects[path] = {};
            }
            return portObjects[path];
        }
        
        function connectorToObject(connector) {
            var path = self.core.getPath(connector);
            if (!connectorObjects.hasOwnProperty(path)) {
                connectorObjects[path] = {};
            }
            return connectorObjects[path];
        }
        
        function endToObject(end) {
            var path = self.core.getPath(end);
            if (!endObjects.hasOwnProperty(path)) {
                endObjects[path] = {};
            }
            return endObjects[path];
        }
        
        for (var path in nodes) {
            var node = nodes[path];
            
            if (self.isMetaTypeOf(node, self.META.ComponentType)) {
                for (var child of self.core.getChildrenPaths(node)) 
                    if (self.isMetaTypeOf(nodes[child], self.META.EnforceableTransition)) 
                        portToObject(nodes[child]).componentType = path;                 
            }
            else if (self.isMetaTypeOf(node, self.META.EnforceableTransition)) {
                var port = portToObject(node);
                architectureModel.ports.push(port);
                port.name = self.core.getAttribute(node, 'name');
            }
            else if (self.isMetaTypeOf(node, self.META.Connector)) {
                if (self.getMetaType(nodes[self.core.getPointerPath(node, 'dst')]) !== self.META.Join) {
                    var connector = connectorToObject(node);
                    architectureModel.connectors.push(connector); 
                    var srcConnectorEnd = endToObject(nodes[self.core.getPointerPath(node, 'src')]);
                    var dstConnectorEnd = endToObject(nodes[self.core.getPointerPath(node, 'dst')]);
                    srcConnectorEnd.connector = connector;
                    dstConnectorEnd.connector = connector;
                    connector.ends = [srcConnectorEnd, dstConnectorEnd];
                }
            }
            else if (self.isMetaTypeOf(node, self.META.Join)) {
                var connector = connectorToObject(node);
                architectureModel.connectors.push(connector);
                connector.ends = [];
                for (var pathConnector in nodes) {
                    var nodeConnector = nodes[pathConnector];
                    if (self.isMetaTypeOf(nodeConnector, self.META.Connector) 
                            && nodes[self.core.getPointerPath(nodeConnector, 'dst')] === node) {
                        var srcConnectorEnd = endToObject(nodes[self.core.getPointerPath(nodeConnector, 'src')]);
                        srcConnectorEnd.connector = connector;
                        connector.ends.push(srcConnectorEnd);
                    }
                }
            }
            else if (self.isMetaTypeOf(node, self.META.Connection) && self.getMetaType(node) !== node) {
                var gmeEnd = nodes[self.core.getPointerPath(node, 'src')];
                var connectorEnd = endToObject(gmeEnd);
                architectureModel.connectorEnds.push(connectorEnd);
                var port = portToObject(nodes[self.core.getPointerPath(node, 'dst')]);
                connectorEnd.port = port;
                if (!port.hasOwnProperty("connectorEnds"))
                    port.connectorEnds = [];
                port.connectorEnds.push(connectorEnd);
                connectorEnd.type = self.core.getAttribute(gmeEnd, 'name');
                connectorEnd.degree = self.core.getAttribute(gmeEnd, 'Degree');
                connectorEnd.multiplicity = self.core.getAttribute(gmeEnd, 'Multiplicity');
            }
        }

        for (var port of architectureModel.ports) {
            port.connectors = new Set();
            for (var connectorEnd of port.connectorEnds) {
                if (connectorEnd.hasOwnProperty('connector'))
                  port.connectors.add(connectorEnd.connector);
            }
        }  
        return architectureModel;       
    };
    
    return ArchitectureSpecGenerator;
});


