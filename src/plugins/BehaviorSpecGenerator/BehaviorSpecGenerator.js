/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Mar 08 2017 15:24:49 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q',
    'common/util/ejs',
    'bipsrc/util/utils',
    'bipsrc/templates/ejsCache',
    'bipsrc/parsers/javaExtra',
    'bipsrc/bower_components/pegjs/peg-0.10.0'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q,
    ejs,
    utils,
    ejsCache,
    javaParser,
    peg) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ComponentTypeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ComponentTypeGenerator.
     * @constructor
     */
    var BehaviorSpecGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    BehaviorSpecGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    BehaviorSpecGenerator.prototype = Object.create(PluginBase.prototype);
    BehaviorSpecGenerator.prototype.constructor = BehaviorSpecGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    BehaviorSpecGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point
        var self = this,
            filesToAdd = {},

            nodes,
            componentTypes = [],
            nextComponentType,
            fileName,
            checkComponentModel;

            checkComponentModel = function (componentModel) {
              var artifact,
              guardExpressionParser,
              i,
              violations = [],
              parseResult;

              filesToAdd[fileName] = ejs.render(ejsCache.componentType.complete, componentModel);
              parseResult = javaParser.checkWholeFile(filesToAdd[fileName]);
              if (parseResult) {
                  violations.push(parseResult);
              }
              self.logger.debug(JSON.stringify(componentModel));
              guardExpressionParser = self.getGuardExpression(componentModel);
              for (i = 0; i < componentModel.transitions.length; i += 1) {
                  if (componentModel.transitions[i].guard.length > 0) {
                      try {
                          parseResult = guardExpressionParser.parse(componentModel.transitions[i].guard);
                      } catch (e) {
                          violations.push({
                              msg: 'Guard expression should be a logical expression ' +
                              'that has only defined guard names as symbols.',
                              node: componentModel.transitions[i]
                          });
                      }
                  }
              }

              nextComponentType++;
              if (nextComponentType < componentTypes.length) {
                var componentType = componentTypes[nextComponentType];
                fileName = self.core.getAttribute(nodes[componentType], 'name') + '.java';
                utils.getModelOfComponentType(self.core, nodes[componentType]).then(checkComponentModel);
              }
              else {
                //violations.push(self.hasViolations(componentTypes));
                if (violations.length > 0) {
                    violations.forEach(function (violation) {
                        self.createMessage(violation.node, violation.message, 'error');
                    });
                    throw new Error ('Model has ' + violations.length + 'violation(s). See messages for details.');
                }
                artifact = self.blobClient.createArtifact('BehaviorSpecifications');
                 artifact.addFiles(filesToAdd)
                .then(function (fileHash) {
                    self.result.addArtifact(fileHash);
                    return artifact.save();
                })
                .then(function (artifactHash) {
                    self.result.addArtifact(artifactHash);
                    self.result.setSuccess(true);
                    callback(null, self.result);
                })
                .catch(function (err) {
                    self.logger.error(err.stack);
                    // Result success is false at invocation.
                    callback(err, self.result);
                }) ;
              }
            };

        self.extractDataModel(self.activeNode)
          .then(function (nodes_) {
                nodes = nodes_;
                componentTypes = self.getComponentTypeNodes(nodes);

                nextComponentType = 0;
                var componentType = componentTypes[nextComponentType];
                fileName = self.core.getAttribute(nodes[componentType], 'name') + '.java';
                self.logger.info(fileName);
                utils.getModelOfComponentType(self.core, nodes[componentType]).then(checkComponentModel);
                });
    };

    BehaviorSpecGenerator.prototype.extractDataModel = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }
                return nodes;
            });
    };

    BehaviorSpecGenerator.prototype.getGuardExpression = function (componentModel){
      var guardNames =[],
          i,
          guardExpressionParser;

      for (i = 0; i < componentModel.guards.length; i += 1) {
          guardNames.push(componentModel.guards[i].name);
      }
      if (guardNames.length > 0) {
          guardExpressionParser = peg.generate(
              ejs.render(ejsCache.guardExpression, {guardNames: guardNames})
          );
      }
      return guardExpressionParser;
    }

    BehaviorSpecGenerator.prototype.getComponentTypeNodes = function (nodes) {
        var self = this,
            path,
            node,
            componentTypes = [];

        for (path in nodes) {
            node = nodes[path];
            if (self.isMetaTypeOf(node, self.META.ComponentType)) {
                componentTypes.push(path);
            }
        }
        return componentTypes;
    };


    BehaviorSpecGenerator.prototype.hasViolations = function (nodes) {
        var violations = [],
            componentTypeNames = {},
            name,
            nodePath,
            node;

        for (nodePath in nodes) {
            var guardNames = {};
            var stateWithValidTransitions = {};
            var totalStateNames = {};
            var transitionNames = {};
            node = nodes[nodePath];
            name = this.core.getAttribute(node, 'name');

                if (componentTypeNames.hasOwnProperty(name)) {
                    violations.push({
                        node: node,
                        message: 'Duplicated component [' + name + '] shared with ' + componentTypeNames[name]
                    });
                }
                componentTypeNames[name] = this.core.getPath(node);

                // check for states,guards and transitions in each componentType
                for (var childPath of this.core.getChildrenPaths(node)) {
                    var child = nodes[childPath];
                    var childName = this.core.getAttribute(child, 'name');
                    if ((this.isMetaTypeOf(child, this.META.State)) || (this.isMetaTypeOf(child, this.META.InitialState))) {
                        if (totalStateNames.hasOwnProperty(childName)) {
                            violations.push({
                                node: node,
                                message: 'Duplicated State [' + childName + '] shared with ' + totalStateNames[childName]
                            });
                        }
                        totalStateNames[childName] = this.core.getPath(child);
                    }

                    if ( this.isMetaTypeOf(child, this.META.EnforceableTransition) || this.isMetaTypeOf(child, this.META.SpontaneousTransition) || this.isMetaTypeOf(child, this.META.InternalTransition) ) {
                        if (this.core.getPointerPath(child, 'dst') === null) {
                            violations.push({
                                node: node,
                                message:'Connection, ' +childName+'(' +childPath+ ') , with no destination encountered in ComponentType ' +name+'(' +componentTypeNames[name] + '). Connect or remove it.'
                            });
                        }
                        if (this.core.getPointerPath(child, 'src') === null) {
                            violations.push({
                                node: node,
                                message:'Connection, ' +childName+'(' +childPath+ ') , with no source encountered in ComponentType ' +name+'(' +componentTypeNames[name] + '). Connect or remove it.'
                            });
                        }
                        var transitionMethod = this.core.getAttribute(child, 'transitionMethod');
                        if (transitionMethod === '') {
                            violations.push({
                                node: node,
                                message: childName + '(' + childPath + ') in ComponentType ' +name+'(' +componentTypeNames[name] + ') does not have transitionMethod attribute defined.'
                            });
                        }
                    }
                    if ( this.isMetaTypeOf(child, this.META.EnforceableTransition) || this.isMetaTypeOf(child, this.META.SpontaneousTransition)) {

                        if (this.core.getPointerPath(child, 'dst') !== null) {
                            var state = nodes[this.core.getPointerPath(child, 'dst')];
                            var stateName = this.core.getAttribute(state, 'name');
                            stateWithValidTransitions[stateName]= this.core.getPath(state);
                        }

                        if (this.core.getPointerPath(child, 'src') !== null) {
                            var state = nodes[this.core.getPointerPath(child, 'src')];
                            var stateName = this.core.getAttribute(state, 'name');
                            stateWithValidTransitions[stateName]= this.core.getPath(state);
                        }

                        if (transitionNames.hasOwnProperty(childName)) {

                            violations.push({
                                node: node,
                                message: 'Duplicated transition [' + childName + '] shared with ' + transitionNames[childName]
                            });
                        }
                        transitionNames[childName] = this.core.getPath(child);
                    }
                    if (this.isMetaTypeOf(child, this.META.Guard)) {
                        if (guardNames.hasOwnProperty(childName)) {
                            violations.push({
                                node: node,
                                message: 'Duplicated guard [' + childName + '] shared with ' + guardNames[childName]
                            });
                        }
                        guardNames[childName] = this.core.getPath(child);

                        var guardMathod = this.core.getAttribute(child, 'guardMethod');
                        if (guardMathod === '') {
                            violations.push({
                                node: node,
                                message: childName + '(' + childPath + ') does not have guardMethod attribute defined.'
                            });
                        }
                    }
                }
                for(var stateName in totalStateNames) {
                    if (!stateWithValidTransitions.hasOwnProperty(stateName)) {
                        this.logger.warn('State '+ stateName +'(' + totalStateNames[stateName] +') in ComponentType ' +name+'(' +componentTypeNames[name] + ') has no transitions associated with it.Check your model.');
                    }
                }

            }
            return violations;
        };
    return BehaviorSpecGenerator;
});
