/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Mon Mar 20 2017 21:44:14 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of JavaBIPEngine.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin JavaBIPEngine.
     * @constructor
     */
    var JavaBIPEngine = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    JavaBIPEngine.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    JavaBIPEngine.prototype = Object.create(PluginBase.prototype);
    JavaBIPEngine.prototype.constructor = JavaBIPEngine;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    JavaBIPEngine.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        self.loadNodeMap(self.activeNode)
                .then(function (nodes) {
                    self.logger.info(Object.keys(nodes));
                    var violations = self.hasViolations(nodes);

                    if (violations.length > 0) {
                        violations.forEach(function (violation) {
                            self.createMessage(violation.node, violation.message, 'error');
                        });
                        throw new Error('Model has ' + violations.length + '  violation(s), see messages for details');
                    }

                    var consistent = self.checkConsistency(nodes);
                })
        .then(function () {
                        self.result.setSuccess(true);
                        callback(null, self.result);
                    })
                    .catch(function (err) {
                        self.logger.error(err.stack);
                        // Result success is false at invocation.
                        callback(err, self.result);
                    });
    };

    JavaBIPEngine.prototype.checkConsistency = function (nodes) {
        var self = this,
         consistent = false;

        for (var path in nodes) {
            var node = nodes[path];
            if (self.isMetaTypeOf(node, self.META.ComponentType)) {
                var cardinality = self.core.getAttribute(node, 'cardinality');
                self.logger.info('cardinality ' + cardinality);
            }
        }

        return consistent;
    };

    JavaBIPEngine.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
                .then(function (nodeArr) {
                    var nodes = {},
                            i;
                    for (i = 0; i < nodeArr.length; i += 1) {
                        nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                    }
                    return nodes;
                });
    };

    JavaBIPEngine.prototype.hasViolations = function (nodes) {
        var violations = [],
        //self = this,
        nodePath,
        node;

        for (nodePath in nodes) {
            node = nodes[nodePath];
            //self.logger.info('nodePath: ' + nodePath);
            if (this.isMetaTypeOf(node, this.META.ComponentType)) {
                // TODO
            } else {
                //TODO: Check cardinalities, multiplicities and degrees
            }
        }
        return violations;
    };

    return JavaBIPEngine;
});
