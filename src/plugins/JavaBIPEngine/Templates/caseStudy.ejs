package org.javabip.executor;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import org.javabip.spec.*;

import org.javabip.api.BIPActor;
import org.javabip.api.BIPEngine;
import org.javabip.api.BIPGlue;
import org.javabip.engine.factory.EngineFactory;
import org.javabip.exceptions.BIPException;
import org.javabip.glue.GlueBuilder;
import org.javabip.glue.TwoSynchronGlueBuilder;
import org.junit.*;

import akka.actor.ActorSystem;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class test<%=className%> {

	  ActorSystem system;
		EngineFactory engineFactory;

		@Before
		public void initialize() {
			system = ActorSystem.create("MySystem");
			engineFactory = new EngineFactory(system);
		}

		@After
		public void cleanup() {
			system.shutdown();
		}

		@Test
	  public void bipTest() throws BIPException {
				int noOfTransitions = 0;
				BIPGlue bipGlue = createGlue("<%=gluePath%>");

				BIPEngine engine = engineFactory.create("myEngine", bipGlue);

				<%for (var i=componentType.length; i>0;i--) {%>
					<%for (var j=componentType[i-1].cardinalityValue; j>0;j--) {%>
						<%=componentType[i-1].name%> component<%=componentType[i-1].name%><%=j%> = new <%=componentType[i-1].name%>();
	          BIPActor actor<%=componentType[i-1].name%><%=j%> = engine.register(component<%=componentType[i-1].name%><%=j%>, "component<%=componentType[i-1].name%><%=j%>", true);
					<%}%>
				<%}%>

				engine.specifyGlue(bipGlue);
				engine.start();
        engine.execute();

				while(noOfTransitions < <%=noOfRequiredTransitions%>) {
					try {
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					noOfTransitions = 0;
					<%for (var i=componentType.length; i>0;i--) {%>
						<%for (var j=componentType[i-1].cardinalityValue; j>0;j--) { %>
							noOfTransitions += component<%=componentType[i-1].name%><%=j%>.transitions
						<%}%>
					<%}%>
				}

				engine.stop();
				engineFactory.destroy(engine);
		}
}
