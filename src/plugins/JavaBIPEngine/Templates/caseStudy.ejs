import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;

import org.javabip.spec.*;

import org.javabip.api.BIPActor;
import org.javabip.api.BIPEngine;
import org.javabip.api.BIPGlue;
import org.javabip.engine.factory.EngineFactory;
import org.javabip.exceptions.BIPException;
import org.javabip.glue.GlueBuilder;
import org.javabip.glue.TwoSynchronGlueBuilder;
import org.junit.*;
import org.javabip.executor.JSONLogger;

import akka.actor.ActorSystem;

public class <%-className%> {

	  ActorSystem system;
		EngineFactory engineFactory;
		JSONLogger loggerJSON = JSONLogger.getLogger();

		@Before
		public void initialize() {
			system = ActorSystem.create("MySystem");
			engineFactory = new EngineFactory(system);
		}

		@After
		public void cleanup() {
			system.shutdown();
		}

		private BIPGlue createGlue(String bipGlueFilename) {
					BIPGlue bipGlue = null;

					InputStream inputStream;
					try {
						inputStream = new FileInputStream(bipGlueFilename);

						bipGlue = GlueBuilder.fromXML(inputStream);

					} catch (FileNotFoundException e) {

						e.printStackTrace();
			}
			return bipGlue;
}

		@Test
	  public void bipTest() throws BIPException {
				int noOfTransitions = 0;
				Map<String, String> componentIDsToNames = new HashMap<String, String>();
				Map<String, String> componentIDsToCardinalities = new HashMap<String, String>();

				<%for (var i=componentType.length; i>0;i--) {%>
					componentIDsToCardinalities.put("<%-componentType[i-1].path%>","<%-componentType[i-1].cardinalityValue%>");
					componentIDsToNames.put("<%-componentType[i-1].path%>","<%-componentType[i-1].name%>");
				<%}%>

				BIPGlue bipGlue = createGlue("Glue.xml");

				BIPEngine engine = engineFactory.create("myEngine", bipGlue);

				<%for (var i=componentType.length; i>0;i--) {%>
					<%for (var j=componentType[i-1].cardinalityValue; j>0;j--) {%>
						<%-componentType[i-1].name%> component<%-componentType[i-1].name%><%-j%> = new <%-componentType[i-1].name%>("<%-j%>");
	          BIPActor actor<%-componentType[i-1].name%><%-j%> = engine.register(component<%-componentType[i-1].name%><%-j%>, "<%-j%>", true);
					<%}%>
				<%}%>

				engine.specifyGlue(bipGlue);
				engine.start();
        engine.execute();

				while(noOfTransitions < <%-noOfRequiredTransitions%>) {
					try {
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					noOfTransitions = 0;
					<%for (var i=componentType.length; i>0;i--) {%>
						<%for (var j=componentType[i-1].cardinalityValue; j>0;j--) { %>
							noOfTransitions += component<%-componentType[i-1].name%><%-j%>.noOfTransitions;
						<%}%>
					<%}%>
				}

				engine.stop();
				engineFactory.destroy(engine);
		}
}
