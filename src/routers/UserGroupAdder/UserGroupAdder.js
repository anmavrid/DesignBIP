/*globals define*/
/*jshint node:true*/

/**
 * Generated by RestRouterGenerator 2.2.0 from webgme on Fri Nov 10 2017 10:32:38 GMT-0600 (Central Standard Time).
 * To use in webgme add to gmeConfig.rest.components[UserGroupAdder] = {
 *    mount: 'path/subPath',
 *    src: path.join(process.cwd(), './UserGroupAdder'),
 *    options: {}
 * }
 * If you put this file in the root of your directory the above will expose the routes at
 * <host>/path/subPath, for example GET <host>/path/subPath/getExample will be routed to the getExample below.
 */

'use strict';

// http://expressjs.com/en/guide/routing.html
var express = require('express'),
    router = express.Router(),
    gmeAuth,
    logger,
    DEFAULT_ORG = 'demo',
    authTurnedOn;

function atNewUser(auth, data) {
    auth.addUserToOrganization(data.userId, DEFAULT_ORG)
        .then(function () {
            logger.debug('Added', data.userId, 'to', DEFAULT_ORG);
        })
        .catch(function (err) {
            logger.error('Failed to add user', data.userId, 'to default organization', DEFAULT_ORG, err);
        });
}

/**
 * Called when the server is created but before it starts to listening to incoming requests.
 * N.B. gmeAuth, safeStorage and workerManager are not ready to use until the start function is called.
 * (However inside an incoming request they are all ensured to have been initialized.)
 *
 * @param {object} middlewareOpts - Passed by the webgme server.
 * @param {GmeConfig} middlewareOpts.gmeConfig - GME config parameters.
 * @param {GmeLogger} middlewareOpts.logger - logger
 * @param {function} middlewareOpts.ensureAuthenticated - Ensures the user is authenticated.
 * @param {function} middlewareOpts.getUserId - If authenticated retrieves the userId from the request.
 * @param {object} middlewareOpts.gmeAuth - Authorization module.
 * @param {object} middlewareOpts.safeStorage - Accesses the storage and emits events (PROJECT_CREATED, COMMIT..).
 * @param {object} middlewareOpts.workerManager - Spawns and keeps track of "worker" sub-processes.
 */
function initialize(middlewareOpts) {
    var ensureAuthenticated = middlewareOpts.ensureAuthenticated,
        getUserId = middlewareOpts.getUserId;

    logger = middlewareOpts.logger.fork('UserGroupAdder');
    authTurnedOn = middlewareOpts.gmeConfig.authentication.enable === true;
    gmeAuth = middlewareOpts.gmeAuth;

    if (authTurnedOn) {
        gmeAuth.addEventListener(gmeAuth.CONSTANTS.USER_CREATED, atNewUser);
    }

    logger.debug('initializing ...');

    // Ensure authenticated can be used only after this rule.
    router.use('*', function (req, res, next) {
        // TODO: set all headers, check rate limit, etc.

        // This header ensures that any failures with authentication won't redirect.
        res.setHeader('X-WebGME-Media-Type', 'webgme.v1');
        next();
    });

    // Use ensureAuthenticated if the routes require authentication. (Can be set explicitly for each route.)
    router.use('*', ensureAuthenticated);

    router.get('/getExample', function (req, res/*, next*/) {
        var userId = getUserId(req);

        res.json({userId: userId, message: 'get request was handled'});
    });

    router.patch('/patchExample', function (req, res/*, next*/) {
        res.sendStatus(200);
    });


    router.post('/postExample', function (req, res/*, next*/) {
        res.sendStatus(201);
    });

    router.delete('/deleteExample', function (req, res/*, next*/) {
        res.sendStatus(204);
    });

    router.get('/error', function (req, res, next) {
        next(new Error('error example'));
    });

    logger.debug('ready');
}




/**
 * Called before the server starts listening.
 * @param {function} callback
 */
function start(callback) {
    if (!authTurnedOn) {
        callback();
        return;
    }

    gmeAuth.addOrganization(DEFAULT_ORG)
        .then(function () {
            logger.info('Created default organization', DEFAULT_ORG, 'at start up.');
            callback();
        })
        .catch(function (err) {
            if (err.message.indexOf('already exists') > -1) {
                logger.info('Default organization', DEFAULT_ORG, 'existed at start up.');
                callback();
            } else {
                callback(err);
            }
        })
        .done();
}

/**
 * Called after the server stopped listening.
 * @param {function} callback
 */
function stop(callback) {
    callback();
}


module.exports = {
    initialize: initialize,
    router: router,
    start: start,
    stop: stop
};
